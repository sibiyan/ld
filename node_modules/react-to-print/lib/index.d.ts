import * as React from "react";
export interface ITriggerProps<T> {
    onClick: () => void;
    ref: (v: T) => void;
}
declare type PropertyFunction<T> = () => T;
export interface IReactToPrintProps {
    bodyClass?: string;
    content: () => React.ReactInstance | null;
    copyStyles?: boolean;
    onAfterPrint?: () => void;
    onBeforeGetContent?: () => void | Promise<any>;
    onBeforePrint?: () => void | Promise<any>;
    onPrintError?: (errorLocation: "onBeforeGetContent" | "onBeforePrint", error: Error) => void;
    pageStyle?: string | PropertyFunction<string>;
    removeAfterPrint?: boolean;
    suppressErrors?: boolean;
    trigger: <T>() => React.ReactElement<ITriggerProps<T>>;
}
export default class ReactToPrint extends React.Component<IReactToPrintProps> {
    private linkTotal;
    private linksLoaded;
    private linksErrored;
    static defaultProps: {
        copyStyles: boolean;
        pageStyle: string;
        removeAfterPrint: boolean;
        suppressErrors: boolean;
    };
    startPrint: (target: HTMLIFrameElement) => void;
    triggerPrint: (target: HTMLIFrameElement) => void;
    handleClick: () => void;
    handlePrint: () => void;
    render(): React.ReactElement<ITriggerProps<unknown>, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)>;
}
export {};
